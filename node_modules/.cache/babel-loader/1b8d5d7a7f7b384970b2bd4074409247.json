{"ast":null,"code":"var _jsxFileName = \"/home/donut/Projects/project2/werds-client/src/components/Typer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Container } from 'react-bootstrap';\nimport '../styles.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Typer = () => {\n  _s();\n\n  const [quote, setQuote] = useState('');\n  const [input, setInput] = useState('');\n  const [result, setResult] = useState('');\n  const [score, setScore] = useState(0);\n  const [style, setStyle] = useState('');\n  const [time, setTime] = useState(0);\n  const [chars, setChars] = useState(0); // sets total amount of characters a user has typed\n\n  const [wpm, setWpm] = useState(0); // wpm = (chars / 5) * 60 / time\n\n  const [running, setRunning] = useState(false);\n  useEffect(() => {\n    let interval;\n\n    if (running) {\n      // if the running state is true, start the timer\n      interval = setInterval(() => {\n        setTime(prevTime => prevTime + 1);\n      }, 1000); // the time state increments by 1 every second\n    } else if (!running) {\n      clearInterval(interval); // stop the interval if running is false\n    }\n\n    return () => clearInterval(interval);\n  }, [running]);\n\n  const calculateWPM = () => {\n    setWpm(Math.floor(chars / 5 * 60 / time) || 0); // words per minute is the total characters typed correctly divided by 5 times 60 divided by the total seconds elapsed\n  };\n\n  const fetchQuote = () => {\n    axios(\"https://api.kanye.rest/\").then(response => {\n      // a quote by kanye west\n      setQuote(response.data.quote.toLowerCase());\n    });\n  };\n\n  const _handleSubmit = e => {\n    e.preventDefault();\n    setRunning(false); // stops the timer \n\n    if (input === quote) {\n      // adds score as the length of characters in the quote if correct\n      setScore(score + quote.length);\n    } else {\n      setScore(score);\n    }\n\n    setInput(''); // clears input\n\n    fetchQuote();\n  };\n\n  if (input === quote && input.length > 0) {\n    // auto submits if the input matches the entire quote\n    setRunning(false);\n    setScore(score + quote.length);\n    setInput('');\n    fetchQuote();\n  }\n\n  const _handleInput = e => {\n    const quoteByChar = quote.split('').slice(0, e.target.value.length).join(''); // slices the quote to the current length of the input\n\n    if (e.target.value === quoteByChar) {\n      // to be compared with the input\n      setChars(chars + 1); // only add to the char count on a correct keystroke\n\n      setResult('nice');\n      setStyle('green');\n    } else {\n      setResult('nahh');\n      setStyle('red');\n    }\n\n    calculateWPM();\n    setRunning(true); // starts the timer when a user starts typing\n\n    setInput(e.target.value); // asynchronous\n  };\n\n  const reset = () => {\n    fetchQuote();\n    setInput('');\n    setResult('');\n    setScore(0);\n    setStyle('');\n    setTime(0);\n    setChars(0);\n    setWpm(0);\n    setRunning(false);\n  };\n\n  useEffect(fetchQuote, []); // load one quote at page load(en)\n\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"mt-4\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: style,\n        children: quote\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"stats\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"time (seconds): \", time]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"wpm: \", wpm]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"score: \", score]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: _handleSubmit,\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          autoFocus: true,\n          onChange: _handleInput,\n          value: input\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: result\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: reset,\n        children: \"reset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Typer, \"a42DAztlW5tQPpOtCf4SKb+c/DM=\");\n\n_c = Typer;\nexport default Typer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Typer\");","map":{"version":3,"names":["React","useState","useEffect","axios","Container","Typer","quote","setQuote","input","setInput","result","setResult","score","setScore","style","setStyle","time","setTime","chars","setChars","wpm","setWpm","running","setRunning","interval","setInterval","prevTime","clearInterval","calculateWPM","Math","floor","fetchQuote","then","response","data","toLowerCase","_handleSubmit","e","preventDefault","length","_handleInput","quoteByChar","split","slice","target","value","join","reset"],"sources":["/home/donut/Projects/project2/werds-client/src/components/Typer.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Container } from 'react-bootstrap';\nimport '../styles.css'\n\nconst Typer = () => {\n\n    const [quote, setQuote] = useState('');\n    const [input, setInput] = useState('');\n    const [result, setResult] = useState('');\n    const [score, setScore] = useState(0);\n    const [style, setStyle] = useState('');\n    const [time, setTime] = useState(0);\n    const [chars, setChars] = useState(0); // sets total amount of characters a user has typed\n    const [wpm, setWpm] = useState(0); // wpm = (chars / 5) * 60 / time\n    const [running, setRunning] = useState(false);\n\n    useEffect(() => {\n        let interval;\n        if (running) { // if the running state is true, start the timer\n            interval = setInterval(() => {\n            setTime((prevTime) => prevTime + 1);\n            }, 1000); // the time state increments by 1 every second\n        } else if (!running) {\n            clearInterval(interval); // stop the interval if running is false\n        }\n        return () => clearInterval(interval);\n    }, [running]);\n\n\n    const calculateWPM = () => {\n        setWpm(Math.floor((chars / 5) * 60 / time) || 0); // words per minute is the total characters typed correctly divided by 5 times 60 divided by the total seconds elapsed\n    }\n\n    const fetchQuote = () => {\n        axios(\"https://api.kanye.rest/\").then((response) => { // a quote by kanye west\n            setQuote(response.data.quote.toLowerCase());\n        });\n    }\n\n    const _handleSubmit = (e) => {\n        e.preventDefault();\n        setRunning(false); // stops the timer \n        if (input === quote) { // adds score as the length of characters in the quote if correct\n            setScore(score + quote.length)\n        } else {\n            setScore(score)\n        }\n        setInput(''); // clears input\n        fetchQuote();\n    }\n\n    if (input === quote && input.length > 0) { // auto submits if the input matches the entire quote\n        setRunning(false);\n            setScore(score + quote.length)\n        setInput('');\n        fetchQuote();\n    }  \n\n    const _handleInput = (e) => {\n        const quoteByChar = quote.split('').slice(0, e.target.value.length).join(''); // slices the quote to the current length of the input\n        if (e.target.value === quoteByChar) { // to be compared with the input\n            setChars(chars + 1); // only add to the char count on a correct keystroke\n            setResult('nice')\n            setStyle('green')\n        } else {\n            setResult('nahh')\n            setStyle('red')\n        }\n        calculateWPM(); \n        setRunning(true); // starts the timer when a user starts typing\n        setInput(e.target.value); // asynchronous\n    }\n\n    const reset = () => {\n        fetchQuote();\n        setInput('');\n        setResult('');\n        setScore(0);\n        setStyle('');\n        setTime(0);\n        setChars(0);\n        setWpm(0);\n        setRunning(false);\n    }\n\n    useEffect(fetchQuote, []); // load one quote at page load(en)\n\n    return (\n        <Container className=\"mt-4\">\n            <div>\n                <h3 className={ style }>{quote}</h3>\n                <div className=\"stats\">\n                    <h3>time (seconds): { time }</h3>\n                    <h3>wpm: { wpm }</h3>\n                    <h3>score: { score }</h3>\n                </div>\n                <form onSubmit={ _handleSubmit }>\n                    <input type=\"text\" autoFocus onChange={ _handleInput } value={ input } />\n                </form>\n                <h3>{ result }</h3>\n                <button onClick={ reset }>reset</button>\n            </div>\n        </Container>\n    );\n};\n\nexport default Typer;"],"mappings":"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"},"metadata":{},"sourceType":"module"}